@page "/edit-moneda/{Id:int}"
@using System.Text.Json
@using blazor.fcimiddleware.fondos.web.admin.Helpers
@using blazor.fcimiddleware.fondos.web.admin.Models.Shared
@using blazor.fcimiddleware.fondos.web.admin.Models.V1.Monedas
@using blazor.fcimiddleware.fondos.web.admin.Services.Monedas
@inject NavigationManager navigationManager
@inject IJSRuntime JsRuntime
@inject IMonedaProxy monedaProxy

<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>Monedas</h1>
            </div>
        </div>
    </div><!-- /.container-fluid -->
</section>

<section class="content">
    <div class="container-fluid">
        <div class="row">
            <!-- left column -->
            <div class="col-md-6">
                <!-- general form elements -->
                <div class="card card-dark">
                    <div class="card-header">
                        <h3 class="card-title"></h3>
                    </div>
                    <!-- /.card-header -->
                    <!-- form start -->
                    <EditForm Model="updateMonedaRequest" OnValidSubmit="OnValidSubmit" class="form-horizontal">
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        <div class="card-body">
                            <div class="form-group row">
                                <label for="descripcion" class="col-sd-2 col-form-label">Descripcion</label>
                                <div class="col-sm-10">
                                    <InputText id="descripcion" @bind-Value="updateMonedaRequest.Descripcion" class="form-control"></InputText>
                                    <ValidationMessage For="@(()=>updateMonedaRequest.Descripcion)"></ValidationMessage>
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="idCAFCI" class="col-sd-2 col-form-label">Id CAFCI</label>
                                <div class="col-sm-10">
                                    <InputText id="idCAFCI" @bind-Value="updateMonedaRequest.IdCAFCI" class="form-control"></InputText>
                                    <ValidationMessage For="@(()=>updateMonedaRequest.IdCAFCI)"></ValidationMessage>
                                </div>
                            </div>                            
                        </div>
                        <!-- /.card-body -->
                        <div class="card-footer">
                            <button type="button" class="btn btn-dark" @onclick="OnCancel">Cancel</button>
                            <button type="submit" class="btn btn-dark float-right">Send</button>
                        </div>
                        <!-- /.card-footer -->
                    </EditForm>
                </div>
                <!-- /.card -->
            </div>
        </div>
        <!-- /.row -->
    </div><!-- /.container-fluid -->
</section>

@code {
    private Moneda moneda { get; set; } = new Moneda();
    private UpdateMonedaRequest updateMonedaRequest = new UpdateMonedaRequest();
    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        GetByIdMonedaRequest getByIdMonedaRequest = new GetByIdMonedaRequest() { Id = Id };
        var result = await monedaProxy.GetById(getByIdMonedaRequest);

        if (result.IsSuccessStatusCode)
        {
            moneda = await getById(result);
            updateMonedaRequest.Id = Id;
            updateMonedaRequest.Descripcion = moneda.Descripcion;
            updateMonedaRequest.IdCAFCI = moneda.IdCAFCI;
        }
        else
        {
            var badRequest = await getBadRequest(result);
            await JsRuntime.ToastrSuccess(badRequest.Message, "Actualizar Moneda");
        }
    }

    private async Task OnValidSubmit()
    {
        //await JsRuntime.SeewtAlertSuccess("Se agrego exitosamente","Crear Moneda");
        var result = await monedaProxy.Update(updateMonedaRequest);
        if (result.IsSuccessStatusCode)
        {
            await JsRuntime.ToastrSuccess("Se modifico exitosamente", "Actualizar Moneda");
            navigationManager.NavigateTo("/monedas");
        }
        else
        {
            var badRequest = await getBadRequest(result);
            await JsRuntime.ToastrError(badRequest.Message, "Actualizar Moneda");
        }
    }

    private void OnCancel()
    {
        navigationManager.NavigateTo("/monedas");
    }

    private async Task<Moneda> getById(HttpResponseMessage result)
    {
        var data = JsonSerializer.Deserialize<Moneda>(
                await result.Content.ReadAsStringAsync(),
                new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    }
            );

        return data;
    }

    private async Task<BadRequest> getBadRequest(HttpResponseMessage result)
    {
        var badRequest = JsonSerializer.Deserialize<BadRequest>(
                    await result.Content.ReadAsStringAsync(),
                    new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true
                        }
                );

        return badRequest;
    }
}
